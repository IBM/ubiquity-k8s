apiVersion: "extensions/v1beta1"
kind: Deployment
metadata:
  name: ubiquity-k8s-provisioner
  labels:
    product: ibm-storage-enabler-for-containers
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: ubiquity-k8s-provisioner
        product: ibm-storage-enabler-for-containers
    spec:
      serviceAccount: ubiquity-k8s-provisioner      # In order to get the server API token from the service account.
      containers:
      - name: ubiquity-k8s-provisioner
        image: UBIQUITY_K8S_PROVISIONER_IMAGE
        env:
          - name: UBIQUITY_ADDRESS  # Ubiquity hostname, should point to the ubiquity service name
            value: "ubiquity"
          - name: UBIQUITY_PORT     # Ubiquity port, should point to the ubiquity service port
            value: "9999"
          - name: RETRIES          # number of retries on failure
            value: "1"
          - name: LOG_PATH         # provisioner log file directory
            value: "/tmp"
          - name: BACKENDS         # "IBM Storage Enabler for Containers" supports "scbe" (IBM Spectrum Connect) as its backend.
            value: "scbe"
          - name: LOG_LEVEL       # debug / info / error
            valueFrom:
              configMapKeyRef:
                name: ubiquity-configmap
                key: LOG-LEVEL

# SCBE Credentials #          - name: UBIQUITY_USERNAME
# SCBE Credentials #            valueFrom:
# SCBE Credentials #              secretKeyRef:
# SCBE Credentials #                name: scbe-credentials
# SCBE Credentials #                key: username

# SCBE Credentials #          - name: UBIQUITY_PASSWORD
# SCBE Credentials #            valueFrom:
# SCBE Credentials #              secretKeyRef:
# SCBE Credentials #                name: scbe-credentials
# SCBE Credentials #                key: password

          - name: UBIQUITY_PLUGIN_SSL_MODE   # require / verify-full
            valueFrom:
              configMapKeyRef:
                name: ubiquity-configmap
                key: SSL-MODE

# Certificate Set : use the below volumeMounts only if predefine certificate given
# Cert #        volumeMounts:
# Cert #          - name: ubiquity-public-certificates
# Cert #            mountPath: /var/lib/ubiquity/ssl/public
# Cert #            readOnly: true

# Certificate Set : use the below volumes only if predefine certificate given
# Cert #      volumes:
# Cert #        - name: ubiquity-public-certificates
# Cert #          configMap:
# Cert #            name: ubiquity-public-certificates
# Cert #            items:
# Cert #              - key: ubiquity-trusted-ca.crt
# Cert #                path: ubiquity-trusted-ca.crt

