apiVersion: "extensions/v1beta1"
kind: Deployment
metadata:
  name: ubiquity
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: ubiquity
    spec:
      containers:
      - name: ubiquity
        image: UBIQUITY_IMAGE
        ports:
        - containerPort: 9999
          name: ubiquity-port
        env:
          ### SCBE:
          - name: SCBE_MANAGEMENT_IP
            value: "SCBE_MANAGEMENT_IP_VALUE"
          - name: SCBE_MANAGEMENT_PORT
            value: "8440"
          - name: SCBE_USERNAME
            value: "SCBE_USERNAME_VALUE"
## Secret Set: for SCBE_USERNAME instead of the value above # TODO
#            valueFrom:
#              secretKeyRef:
#                name: scbe-credentials
#                key: username

          - name: SCBE_PASSWORD
            value: "SCBE_PASSWORD_VALUE"
## Secret Set: for SCBE_PASSWORD instead of the value above # TODO
#            valueFrom:
#              secretKeyRef:
#                name: scbe-credentials
#                key: password

          - name: UBIQUITY_SERVER_VERIFY_SCBE_CERT
# Cert #            value: "/var/lib/ubiquity/ssl/public/scbe.crt"  # Certificate Set : use only if predefine certificate given
            value: ""   # for none Cert only

          - name: SCBE_DEFAULT_SERVICE
            value: "SCBE_DEFAULT_SERVICE_VALUE"

          ### Ubiquity configuration:
          - name: LOG_LEVEL         # debug / info / error
            value: "debug"          # TODO will come from generic configMap
          - name: DEFAULT_VOLUME_SIZE
            value: "2"              # TODO will come from ubiquity configMap
          - name: UBIQUITY_INSTANCE_NAME
            value: "UBIQUITY_INSTANCE_NAME_VALUE"   # TODO will come from ubiquity configMap
          - name: DEFAULT_FSTYPE    # ext4 or xfs
            value: "ext4"           # TODO will come from ubiquity configMap

          - name: PORT              # Ubiquity port
            value: "9999"
          - name: LOG_PATH          # Ubiquity log file directory
            value: "/tmp"
          - name: DEFAULT_BACKEND   # or other backends, such as :scbe, spectrum-scale-nfs
            value: "scbe"

            ### Ubiquity certificates:
          - name: UBIQUITY_SERVER_USE_SSL      # boolean (true or false)   # TODO this param will be removed because its the default always to work with ssl
# Cert #            value: "true"                     # Certificate Set : use only if predefine certificate given
            value: ""   # for none Cert only
          - name: UBIQUITY_SERVER_CERT_PUBLIC  # path-to-public-key-file
# Cert #            value: "/var/lib/ubiquity/ssl/private/server.crt"   # Certificate Set : use only if predefine certificate given
            value: ""   # for none Cert only
          - name: UBIQUITY_SERVER_CERT_PRIVATE # path-to-private-key-file
# Cert #            value: "/var/lib/ubiquity/ssl/private/server.key"   # Certificate Set : use only if predefine certificate given
            value: ""   # for none Cert only

            ### Ubiquity DB:
          - name: UBIQUITY_DB_PSQL_HOST   # Ubiquity DB hostname, should point to the ubiquity-db service name
            value: "ubiquity-db"
          - name: UBIQUITY_DB_PSQL_PORT   # Ubiquity DB port, should point to the ubiquity-db port
            value: "5432"
          - name: UBIQUITY_DB_USER        # Ubiquity DB user      # TODO must set to work with the new postgres image
            value: ""
          - name: UBIQUITY_DB_PASSWORD    # Ubiquity DB password  # TODO must set to work with the new postgres image
            value: ""
          - name: UBIQUITY_DB_NAME                                # TODO must set to work with the new postgres image
            value: ""
          - name: UBIQUITY_DB_CONNECT_TIMEOUT
            value: "3"

          - name: UBIQUITY_DB_SSL_MODE         # Values : require/verify-full. The default is disable # TODO verify-full
# Cert #            value: "verify-full"     # Certificate Set : use only if predefine certificate given
            value: ""   # for none Cert only
          - name: UBIQUITY_DB_SSL_ROOT_CERT    # path to CA that signed your PG certificate   # TODO should be hardcoded in the ubiquity server
# Cert #            value: "/var/lib/ubiquity/ssl/public/ubiquity-db.crt"
            value: ""   # for none Cert only

# Certificate Set : use the below volumeMounts and volumes only if predefine certificate given
# Cert #        volumeMounts:
# Cert #        - name: ubiquity-private-certificate
# Cert #          mountPath: /var/lib/ubiquity/ssl/private
# Cert #          readOnly: true
# Cert #        - name: ubiquity-public-certificates
# Cert #          mountPath: /var/lib/ubiquity/ssl/public
# Cert #          readOnly: true
# Cert #
# Cert #      volumes:
# Cert #      - name: ubiquity-private-certificate
# Cert #          secret:
# Cert #            secretName: ubiquity-private-certificate   # expected keys: server.crt
# Cert #            items:
# Cert #            - key: server.crt
# Cert #              path: server.crt
# Cert #            - key: server.key
# Cert #              path: server.key
# Cert #      - name: ubiquity-public-certificates
# Cert #          configMap:
# Cert #            name: ubiquity-public-certificates
# Cert #            items:
# Cert #            - key: ubiquity-db-trusted-ca.crt
# Cert #              path: ubiquity-db.crt
# Cert #            - key: scbe-trusted-ca.crt
# Cert #              path: scbe.crt

