apiVersion: "extensions/v1beta1"
kind: Deployment
metadata:
  name: ubiquity-k8s-provisioner
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: ubiquity-k8s-provisioner
    spec:
      containers:
      - name: ubiquity-k8s-provisioner
        image: UBIQUITY_K8S_PROVISIONER_IMAGE
        env:
          - name: UBIQUITY_ADDRESS  # Ubiquity hostname, should point to the ubiquity service name
            value: "ubiquity"
          - name: UBIQUITY_PORT     # Ubiquity port, should point to the ubiquity service port
            value: "9999"
          - name: KUBECONFIG
            value: "/tmp/k8sconfig/config"
          - name: RETRIES          # number of retries on failure
            value: "1"
          - name: LOG_PATH         # provisioner log file directory
            value: "/tmp"
          - name: BACKENDS         # used backends "spectrum-scale,spectrum-scale-nfs,scbe"
            value: "scbe"

          - name: LOG_LEVEL       # debug / info / error
            value: "debug"        # TODO will come from generic configMap

          - name: UBIQUITY_PLUGIN_SSL_MODE   # require / verify-full
            value: "UBIQUITY_PLUGIN_SSL_MODE_VALUE"

#          - name: UBIQUITY_PLUGIN_VERIFY_CA # path-to-CA-cert
#            value: "/var/lib/ubiquity/ssl/public/ubiquity-trusted-ca.crt"


          - name: UBIQUITY_USERNAME
            value: "UBIQUITY_USERNAME_VALUE"
## Secret Set: for SCBE_USERNAME instead of the value above # TODO
#            valueFrom:
#              secretKeyRef:
#                name: scbe-credentials
#                key: username

          - name: UBIQUITY_PASSWORD
            value: "UBIQUITY_PASSWORD_VALUE"
## Secret Set: for SCBE_PASSWORD instead of the value above # TODO
#            valueFrom:
#              secretKeyRef:
#                name: scbe-credentials
#                key: password


        volumeMounts:
          - name: k8s-config
            mountPath: /tmp/k8sconfig
# Certificate Set : use the below volumeMounts only if predefine certificate given
# Cert #          - name: ubiquity-public-certificates
# Cert #            mountPath: /var/lib/ubiquity/ssl/public
# Cert #            readOnly: true

      volumes:
        - name: k8s-config
          configMap:
            name: k8s-config
# Certificate Set : use the below volumes only if predefine certificate given
# Cert #        - name: ubiquity-public-certificates
# Cert #          configMap:
# Cert #            name: ubiquity-public-certificates
# Cert #            items:
# Cert #              - key: ubiquity-trusted-ca.crt
# Cert #                path: ubiquity-trusted-ca.crt

