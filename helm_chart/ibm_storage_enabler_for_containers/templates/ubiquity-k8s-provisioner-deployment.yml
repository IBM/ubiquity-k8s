apiVersion: "extensions/v1beta1"
kind: Deployment
metadata:
  name: ubiquity-k8s-provisioner
  labels:
    product: ibm-storage-enabler-for-containers
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: ubiquity-k8s-provisioner
        product: ibm-storage-enabler-for-containers
    spec:
      serviceAccount: ubiquity-k8s-provisioner      # In order to get the server API token from the service account.
      containers:
      - name: ubiquity-k8s-provisioner
        image: "{{ .Values.ubiquityK8sProvisioner.image.repository }}:{{ .Values.ubiquityK8sProvisioner.image.tag }}"
        imagePullPolicy: {{ .Values.ubiquityK8sProvisioner.image.pullPolicy }}
        {{- with .Values.ubiquityK8sProvisioner.resources }}
        resources:
{{ toYaml . | indent 10 }}
        {{- end }}
        env:
          - name: UBIQUITY_ADDRESS  # Ubiquity hostname, should point to the ubiquity service name
            value: "ubiquity"
          - name: UBIQUITY_PORT     # Ubiquity port, should point to the ubiquity service port
            value: "9999"
          - name: RETRIES          # number of retries on failure
            value: "1"
          - name: LOG_PATH         # provisioner log file directory
            value: "/tmp"
          - name: BACKENDS         # "IBM Storage Enabler for Containers" supports "scbe" (IBM Spectrum Connect) as its backend.
            value: "scbe"
          - name: LOG_LEVEL       # debug / info / error
            valueFrom:
              configMapKeyRef:
                name: ubiquity-configmap
                key: LOG-LEVEL

{{- if .Values.ubiquity.spectrumConnect }} # TODO consider to check if the secret exist instead
          - name: UBIQUITY_USERNAME
            valueFrom:
              secretKeyRef:
                name: scbe-credentials
                key: username

          - name: UBIQUITY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: scbe-credentials
                key: password
{{- end }}

          - name: UBIQUITY_PLUGIN_SSL_MODE   # require / verify-full
            valueFrom:
              configMapKeyRef:
                name: ubiquity-configmap
                key: SSL-MODE


{{- if (eq .Values.globalConfig.sslMode "verify-full") }}
        volumeMounts:
          - name: ubiquity-public-certificates
            mountPath: /var/lib/ubiquity/ssl/public
            readOnly: true
      volumes:
        - name: ubiquity-public-certificates
          configMap:
            name: ubiquity-public-certificates
            items:
              - key: ubiquity-trusted-ca.crt
                path: ubiquity-trusted-ca.crt
{{- end }}
